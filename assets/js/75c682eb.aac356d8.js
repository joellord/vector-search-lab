"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[500],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>f});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?n.createElement(f,c(c({ref:r},p),{},{components:t})):n.createElement(f,c({ref:r},p))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=m;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[d]="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=t[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},725:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=t(7462),a=(t(7294),t(3905));const o={sidebar_position:5},c="Add semantic search to your application",i={unversionedId:"vector-search/add-to-app",id:"vector-search/add-to-app",title:"Add semantic search to your application",description:"You now know everything you need to add full-text search capabilities to your application.",source:"@site/docs/5-vector-search/5-add-to-app.mdx",sourceDirName:"5-vector-search",slug:"/vector-search/add-to-app",permalink:"/vector-search-lab/docs/vector-search/add-to-app",draft:!1,editUrl:"https://github.com/mongodb-developer/vector-search-lab/blob/main/docs/5-vector-search/5-add-to-app.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Construct vector search queries",permalink:"/vector-search-lab/docs/vector-search/search-queries"},next:{title:"\ud83c\udfaf Summary",permalink:"/vector-search-lab/docs/summary"}},s={},l=[],p={toc:l},d="wrapper";function u(e){let{components:r,...t}=e;return(0,a.kt)(d,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"add-semantic-search-to-your-application"},"Add semantic search to your application"),(0,a.kt)("p",null,"You now know everything you need to add full-text search capabilities to your application."),(0,a.kt)("p",null,"Open up the code from the server file ",(0,a.kt)("inlineCode",{parentName:"p"},"server/controllers/movies.mjs")," once more, and edit the ",(0,a.kt)("inlineCode",{parentName:"p"},"vectorSearch")," method to query your data for semantic search."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Answer"),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'  async vectorSearch(searchTerms) {\n    const embeddedSearchTerms = await getTermEmbeddings(searchTerms);\n    if (embeddedSearchTerms === null) throw new Error("No embedding found");\n\n    const movies = await collection\n      .aggregate([\n        {\n          $search: {\n            index: "default",\n            knnBeta: {\n              vector: embeddedSearchTerms,\n              path: "plot_embedding",\n              k: 20,\n            },\n          },\n        },\n        {\n          $project: {\n            title: 1,\n            year: 1,\n            "imdb.rating": 1,\n            fullplot: 1,\n            poster: 1,\n            released: 1,\n            genres: 1,\n            score: { $meta: "searchScore" },\n          },\n        },\n      ])\n      .toArray();\n    return movies;\n  }\n')))))}u.isMDXComponent=!0}}]);