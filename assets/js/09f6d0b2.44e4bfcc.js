"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[637],{4137:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),m=o,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8849:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=r(7462),o=(r(7294),r(4137));r(9524);const a={sidebar_position:2},i="Create vectors from your data",c={unversionedId:"vector-search/create-vectors",id:"vector-search/create-vectors",title:"Create vectors from your data",description:"In order to search your data, you will need to create embeddings for your documents. Embeddings are vectors that represent your documents in a vector space. The vector space is a multi-dimensional space where each dimension represents a feature of your documents.",source:"@site/docs/5-vector-search/2-create-vectors.mdx",sourceDirName:"5-vector-search",slug:"/vector-search/create-vectors",permalink:"/vector-search-lab/docs/vector-search/create-vectors",draft:!1,editUrl:"https://github.com/joellord/vector-search-lab/blob/main/docs/5-vector-search/2-create-vectors.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Semantic Search",permalink:"/vector-search-lab/docs/vector-search/semantic-search"},next:{title:"Create Vector Search indexes",permalink:"/vector-search-lab/docs/vector-search/create-index"}},s={},l=[{value:"Using OpenAI",id:"using-openai",level:2},{value:"Searching with Vector Search",id:"searching-with-vector-search",level:2},{value:"Configuring the application",id:"configuring-the-application",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-vectors-from-your-data"},"Create vectors from your data"),(0,o.kt)("p",null,"In order to search your data, you will need to create embeddings for your documents. Embeddings are vectors that represent your documents in a vector space. The vector space is a multi-dimensional space where each dimension represents a feature of your documents."),(0,o.kt)("p",null,"Many services offer pre-trained models that you can use to create embeddings for your documents."),(0,o.kt)("h2",{id:"using-openai"},"Using OpenAI"),(0,o.kt)("p",null,"OpenAI is a company that develops AI models for natural language processing. They offer a free API that you can use to create embeddings for your documents. The API is called ",(0,o.kt)("a",{parentName:"p",href:"https://platform.openai.com/docs/api-reference/embeddings"},"OpenAI's Embedding API"),"."),(0,o.kt)("p",null,"To get some embeddings using their API, you need to create an account and get an API key."),(0,o.kt)("p",null,"Once you have an API key, you can use the following code to get embeddings from a text field."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const getTermEmbeddings = async (text) => {\n  const url = "https://api.openai.com/v1/embeddings";\n\n  // Call OpenAI API to get the embeddings.\n  let response = await fetch(url, {\n    method: "POST",\n    headers: {\n      Authorization: `Bearer ${OPENAI_API_KEY}`,\n      "Content-Type": "application/json",\n    },\n    body: JSON.stringify({\n      input: text,\n      model: "text-embedding-ada-002",\n    })\n  }).then((res) => res.json());\n\n  return response.data[0].embedding;\n};\n')),(0,o.kt)("p",null,"You can see the code in action in the ",(0,o.kt)("inlineCode",{parentName:"p"},"server/embeddings/openai.mjs")," file in your CodeSandbox."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You would need to run this function on the fields you want to vectorize for each of your documents. For your convenience, the ",(0,o.kt)("inlineCode",{parentName:"p"},"sample_mflix.embedded_movies")," collection already has the embeddings created.")),(0,o.kt)("h2",{id:"searching-with-vector-search"},"Searching with Vector Search"),(0,o.kt)("p",null,"To search your data, you will need to also vectorize your query. You can use the same function to vectorize your query as well."),(0,o.kt)("p",null,"Once you have a vector, you will be able to use Vector Search to find the most similar documents to your query."),(0,o.kt)("h2",{id:"configuring-the-application"},"Configuring the application"),(0,o.kt)("p",null,"Remember those two environment variables we created in the previous chapter? Now it's time to use them."),(0,o.kt)("p",null,"The first one is ",(0,o.kt)("inlineCode",{parentName:"p"},"EMBEDDINGS_SOURCE"),". It tells the application where to get the embeddings from. You can set it to either ",(0,o.kt)("inlineCode",{parentName:"p"},"openai")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"serverlessEndpoint"),"."),(0,o.kt)("p",null,"If you already have an OpenAI API key, you can set the value to ",(0,o.kt)("inlineCode",{parentName:"p"},"openai"),". You can then set the ",(0,o.kt)("inlineCode",{parentName:"p"},"EMBEDDING_KEY")," variable to your API key."),(0,o.kt)("p",null,"If you don't have an OpenAI API key, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"serverlessEndpoint")," value. This will tell the application to use the serverless function we created for you."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You should probably use ",(0,o.kt)("inlineCode",{parentName:"p"},"EMBEDDINGS_SOURCE=serverlessEndpoint")," for now. This will allow you to get started with the application without having to create an OpenAI account.")))}d.isMDXComponent=!0}}]);